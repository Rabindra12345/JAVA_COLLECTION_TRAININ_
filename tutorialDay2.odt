<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:officeooo="http://openoffice.org/2009/office" xmlns:css3t="http://www.w3.org/TR/css3-text/" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:rpt="http://openoffice.org/2005/report" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:calcext="urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:drawooo="http://openoffice.org/2010/draw" xmlns:loext="urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:xforms="http://www.w3.org/2002/xforms" office:version="1.3" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><dc:date>2023-03-13T17:46:29.384072853</dc:date><meta:editing-duration>PT9H24M36S</meta:editing-duration><meta:editing-cycles>6</meta:editing-cycles><meta:generator>LibreOffice/7.3.6.2$Linux_X86_64 LibreOffice_project/30$Build-2</meta:generator><meta:document-statistic meta:table-count="0" meta:image-count="16" meta:object-count="0" meta:page-count="14" meta:paragraph-count="257" meta:word-count="2463" meta:character-count="15760" meta:non-whitespace-character-count="12782"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="long">331373</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="long">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="long">39123</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="long">16254</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="long">11061</config:config-item>
     <config:config-item config:name="ViewTop" config:type="long">410520</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="long">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="long">331373</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="long">39121</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="long">347625</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">1</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">84</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
     <config:config-item config:name="KeepRatio" config:type="boolean">false</config:config-item>
     <config:config-item config:name="AnchoredTextOverflowLegacy" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectFields" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectBookmarks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmptyDbFieldHidesPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DisableOffPagePositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SubtractFlysAnchoredAtFlys" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PropLineSpacingShrinksFirstLine" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyParagraphMarkFormatToNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="GutterAtTop" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TreatSingleColumnBreakAsPageBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedSystemFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedComplexScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedAsianScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedLatinScriptFonts" config:type="boolean">true</config:config-item>
   <config:config-item config:name="EmbedOnlyUsedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ContinuousEndnotes" config:type="boolean">false</config:config-item>
   <config:config-item config:name="EmbedFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClippedPictures" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FloattableNomargins" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="HeaderSpacingBelowLastPara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverMargin" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FrameAutowidthWithMorePara" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveThumbnail" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="StylesNoDefault" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
   <config:config-item config:name="Rsid" config:type="int">546885</config:config-item>
   <config:config-item config:name="EmbeddedDatabaseName" config:type="string"/>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="FootnoteInColumnToPageEnd" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaLineSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SurroundTextWrapSmall" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompTrailingBlanks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddVerticalFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RsidRoot" config:type="int">546885</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MsWordCompMinLineHeightByFly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="BackgroundParaOverDrawings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink"/>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Liberation Mono" svg:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Devanagari" svg:font-family="&apos;Lohit Devanagari&apos;"/>
  <style:font-face style:name="Lohit Devanagari1" svg:font-family="&apos;Lohit Devanagari&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans CJK SC" svg:font-family="&apos;Noto Sans CJK SC&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Noto Sans Mono CJK SC" svg:font-family="&apos;Noto Sans Mono CJK SC&apos;" style:font-family-generic="modern" style:font-pitch="fixed"/>
  <style:font-face style:name="Noto Serif CJK SC" svg:font-family="&apos;Noto Serif CJK SC&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#3465a4" draw:fill-color="#729fcf" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" loext:opacity="0%" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Serif CJK SC" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Lohit Devanagari1" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" loext:opacity="0%" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Noto Serif CJK SC" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Lohit Devanagari1" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2" loext:hyphenation-no-caps="false"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable" fo:font-size="14pt" style:font-name-asian="Noto Sans CJK SC" style:font-family-asian="&apos;Noto Sans CJK SC&apos;" style:font-family-generic-asian="system" style:font-pitch-asian="variable" style:font-size-asian="14pt" style:font-name-complex="Lohit Devanagari1" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-family-generic-complex="system" style:font-pitch-complex="variable" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0972in" style:contextual-spacing="false" fo:line-height="115%"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" style:contextual-spacing="false" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:language="zxx" fo:country="none" style:font-size-asian="12pt" style:language-asian="zxx" style:country-asian="none" style:font-name-complex="Lohit Devanagari" style:font-family-complex="&apos;Lohit Devanagari&apos;" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <style:style style:name="Preformatted_20_Text" style:display-name="Preformatted Text" style:family="paragraph" style:parent-style-name="Standard" style:class="html">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false"/>
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" fo:font-size="10pt" style:font-name-asian="Noto Sans Mono CJK SC" style:font-family-asian="&apos;Noto Sans Mono CJK SC&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-size-asian="10pt" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed" style:font-size-complex="10pt"/>
  </style:style>
  <style:style style:name="Source_20_Text" style:display-name="Source Text" style:family="text">
   <style:text-properties style:font-name="Liberation Mono" fo:font-family="&apos;Liberation Mono&apos;" style:font-family-generic="modern" style:font-pitch="fixed" style:font-name-asian="Noto Sans Mono CJK SC" style:font-family-asian="&apos;Noto Sans Mono CJK SC&apos;" style:font-family-generic-asian="modern" style:font-pitch-asian="fixed" style:font-name-complex="Liberation Mono" style:font-family-complex="&apos;Liberation Mono&apos;" style:font-family-generic-complex="modern" style:font-pitch-complex="fixed"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <style:style style:name="Graphics" style:family="graphic">
   <style:graphic-properties text:anchor-type="paragraph" svg:x="0in" svg:y="0in" style:wrap="dynamic" style:number-wrapped-paragraphs="no-limit" style:wrap-contour="false" style:vertical-pos="top" style:vertical-rel="paragraph" style:horizontal-pos="center" style:horizontal-rel="paragraph"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:padding="0.0193in" fo:border="0.06pt solid #d9d9e3"/>
   <style:text-properties loext:padding="0.0193in" loext:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.1965in" style:contextual-spacing="false" fo:padding="0.0193in" fo:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:paragraph-properties fo:padding="0.0193in" fo:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Preformatted_20_Text">
   <style:text-properties fo:font-size="18pt" style:font-size-asian="18pt" style:font-size-complex="18pt"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties officeooo:rsid="00085845" officeooo:paragraph-rsid="00085845"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:font-size="18pt" style:font-size-asian="18pt" style:font-size-complex="18pt"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:font-size="18pt" style:font-size-asian="18pt" style:font-size-complex="18pt" loext:padding="0.0193in" loext:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties loext:padding="0.0193in" loext:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:padding="0.0193in" fo:border="0.06pt solid #d9d9e3"/>
   <style:text-properties loext:padding="0.0193in" loext:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L1">
   <style:paragraph-properties fo:padding="0.0193in" fo:border="0.06pt solid #d9d9e3"/>
   <style:text-properties loext:padding="0.0193in" loext:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:padding="0.0193in" fo:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0in" style:contextual-spacing="false"/>
   <style:text-properties loext:padding="0in" loext:border="none"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Text_20_body">
   <style:text-properties fo:font-size="18pt" style:font-size-asian="18pt" style:font-size-complex="18pt"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Text_20_body" style:list-style-name="L1">
   <style:paragraph-properties fo:padding="0.0193in" fo:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties loext:padding="0.0193in" loext:border="0.06pt solid #d9d9e3"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties officeooo:rsid="00085845"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:font-size="18pt" style:font-size-asian="18pt" style:font-size-complex="18pt"/>
  </style:style>
  <style:style style:name="fr1" style:family="graphic" style:parent-style-name="Graphics">
   <style:graphic-properties fo:margin-left="0in" fo:margin-right="0in" fo:margin-top="0in" fo:margin-bottom="0in" style:vertical-pos="top" style:vertical-rel="baseline" fo:padding="0in" fo:border="none" style:mirror="none" fo:clip="rect(0in, 0in, 0in, 0in)" draw:luminance="0%" draw:contrast="0%" draw:red="0%" draw:green="0%" draw:blue="0%" draw:gamma="100%" draw:color-inversion="false" draw:image-opacity="100%" draw:color-mode="standard"/>
  </style:style>
  <text:list-style style:name="L1">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" loext:num-list-format="%1%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.2961in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" loext:num-list-format="%2%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="0.7882in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" loext:num-list-format="%3%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.2807in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" loext:num-list-format="%4%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="1.7728in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" loext:num-list-format="%5%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="2.2654in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" loext:num-list-format="%6%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="2.7579in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" loext:num-list-format="%7%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.25in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" loext:num-list-format="%8%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="3.7425in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" loext:num-list-format="%9%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.2346in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" loext:num-list-format="%10%." style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:space-before="4.7272in" text:min-label-width="0.1965in"/>
   </text:list-level-style-number>
  </text:list-style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.2681in" fo:page-height="11.6929in" style:num-format="1" style:print-orientation="portrait" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:footnote-max-height="0in" loext:margin-gutter="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Figure"/>
   </text:sequence-decls>
   <text:p text:style-name="P6">give me the clear concept for lambda with vivid examples java.</text:p>
   <text:p text:style-name="P13">In Java, a lambda expression is a way to define a functional interface with a concise syntax. A functional interface is an interface that contains only one abstract method, and can be used as the basis for a lambda expression.</text:p>
   <text:p text:style-name="P13">Here is an example of a lambda expression:</text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class LambdaExample {</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Define the lambda expression</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>MyFunctionalInterface myLambda = (int x, int y) -&gt; x + y;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Use the lambda expression</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>int result = myLambda.operation(2, 3);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(&quot;Result: &quot; + result);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">interface MyFunctionalInterface {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>int operation(int x, int y);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In this example, we define a functional interface called </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">MyFunctionalInterface</text:span></text:span><text:span text:style-name="T3"> with a single method called </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">operation</text:span></text:span><text:span text:style-name="T3">. We then define a lambda expression that implements this interface by adding two integers together. The lambda expression is assigned to a variable of type </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">MyFunctionalInterface</text:span></text:span><text:span text:style-name="T3">, and is then used to compute the </text:span><text:soft-page-break/><text:span text:style-name="T3">sum of 2 and 3.</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">Lambda expressions are often used in conjunction with functional interfaces to provide concise implementations of methods. Here&apos;s another example that shows how a lambda expression can be used to implement a method that takes a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> as an argument:</text:span></text:p>
   <text:p text:style-name="P4">typescriptCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.ArrayList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.Arrays;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.List;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.function.Predicate;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class LambdaExample {</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Define the predicate using a lambda expression</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>Predicate&lt;String&gt; predicate = s -&gt; s.length() &gt; 5;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Define the list of strings</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(&quot;apple&quot;, &quot;banana&quot;, &quot;cherry&quot;, &quot;date&quot;, &quot;elderberry&quot;));</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Filter the list using the predicate</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List&lt;String&gt; filteredList = filterList(list, predicate);</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Print the filtered list</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(filteredList);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static List&lt;String&gt; filterList(List&lt;String&gt; list, Predicate&lt;String&gt; predicate) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List&lt;String&gt; filteredList = new ArrayList&lt;&gt;();</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>for (String s : list) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="12"/>if (predicate.test(s)) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="16"/>filteredList.add(s);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="12"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>return filteredList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In this example, we define a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> using a lambda expression that tests whether a given string has a length greater than 5. We then define a list of strings, and use the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">filterList</text:span></text:span><text:span text:style-name="T3"> method to filter the list using the predicate. The </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">filterList</text:span></text:span><text:span text:style-name="T3"> method takes a list of strings and a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt;</text:span></text:span><text:span text:style-name="T3"> as arguments, and returns a new list containing only the elements that pass the test specified by the predicate.</text:span></text:p>
   <text:p text:style-name="P13">Overall, lambda expressions are a powerful feature of Java that allow for concise and expressive code when working with functional interfaces.</text:p>
   <text:p text:style-name="P13"><draw:frame draw:style-name="fr1" draw:name="Image1" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="0"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image2" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="1"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P13">What is predicate ?</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In Java, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> is a functional interface in the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">java.util.function</text:span></text:span><text:span text:style-name="T3"> package that represents a boolean-valued function that takes a single argument and returns a boolean value. The method signature of the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">test()</text:span></text:span><text:span text:style-name="T3"> method in the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> interface is:</text:span></text:p>
   <text:p text:style-name="P4"><text:soft-page-break/>javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">boolean test(T t);</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">Where </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">T</text:span></text:span><text:span text:style-name="T3"> is the type of the input argument to the function.</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">A </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> is often used as a lambda expression to test whether a given object satisfies a certain condition. Here is an example of how to use a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> to test whether a string starts with a certain letter:</text:span></text:p>
   <text:p text:style-name="P4">goCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt; startsWithA = s -&gt; s.startsWith(&quot;A&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">System.out.println(startsWithA.test(&quot;Apple&quot;)); // Output: true</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">System.out.println(startsWithA.test(&quot;Banana&quot;)); // Output: false</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In this example, we define a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt;</text:span></text:span><text:span text:style-name="T3"> using a lambda expression that tests whether a given string starts with the letter &quot;A&quot;. We then use the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">test()</text:span></text:span><text:span text:style-name="T3"> method of the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">startsWithA</text:span></text:span><text:span text:style-name="T3"> </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> to test whether two strings satisfy this condition.</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">Predicates can also be combined using logical operators like </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">and()</text:span></text:span><text:span text:style-name="T3">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">or()</text:span></text:span><text:span text:style-name="T3">, and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">negate()</text:span></text:span><text:span text:style-name="T3"> to create more complex conditions. Here is an example of how to combine two </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3">s using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">and()</text:span></text:span><text:span text:style-name="T3"> method:</text:span></text:p>
   <text:p text:style-name="P4">rustCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt; startsWithA = s -&gt; s.startsWith(&quot;A&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt; hasLength5 = s -&gt; s.length() == 5;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt; startsWithAAndHasLength5 = startsWithA.and(hasLength5);</text:span></text:span></text:p>
   <text:p text:style-name="P4"><text:soft-page-break/></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">System.out.println(startsWithAAndHasLength5.test(&quot;Apple&quot;)); // Output: false</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">System.out.println(startsWithAAndHasLength5.test(&quot;Array&quot;)); // Output: true</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In this example, we combine two </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt;</text:span></text:span><text:span text:style-name="T3">s using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">and()</text:span></text:span><text:span text:style-name="T3"> method to create a new </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate&lt;String&gt;</text:span></text:span><text:span text:style-name="T3"> that tests whether a given string starts with the letter &quot;A&quot; and has a length of 5. We then use the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">test()</text:span></text:span><text:span text:style-name="T3"> method of the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">startsWithAAndHasLength5</text:span></text:span><text:span text:style-name="T3"> </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Predicate</text:span></text:span><text:span text:style-name="T3"> to test whether two strings satisfy this condition.</text:span></text:p>
   <text:p text:style-name="P6">Q. what is this code tryna say , explain me with simple implementation code java, List list = new ArrayList(); String name = (String) list.get(0);</text:p>
   <text:p text:style-name="P13">The code is trying to retrieve an element from an ArrayList and cast it to a String type. Here&apos;s a simple implementation in Java:</text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.ArrayList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.List;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class Main {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Create an empty ArrayList</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List list = new ArrayList();</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Add a String element to the ArrayList</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>list.add(&quot;Hello World!&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Retrieve the first element from the ArrayList and cast it to a String type</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>String name = (String) list.get(0);</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>// Print the value of the name variable</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(name);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In this implementation, we create an empty ArrayList using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">List</text:span></text:span><text:span text:style-name="T3"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">ArrayList</text:span></text:span><text:span text:style-name="T3"> interfaces from the Java Collections Framework. We add a String element to the ArrayList using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">add()</text:span></text:span><text:span text:style-name="T3"> method. Then, we retrieve the first element from the ArrayList using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">get()</text:span></text:span><text:span text:style-name="T3"> method and cast it to a String type using </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">(String)</text:span></text:span><text:span text:style-name="T3">. Finally, we print the value of the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">name</text:span></text:span><text:span text:style-name="T3"> variable using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">println()</text:span></text:span><text:span text:style-name="T3"> method. The output of the code should be </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">&quot;Hello World!&quot;</text:span></text:span><text:span text:style-name="T3">.</text:span></text:p>
   <text:p text:style-name="P13"><draw:frame draw:style-name="fr1" draw:name="Image3" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="2"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image4" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="3"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P13">while adding values to list, does it add whole string on a single element only ??</text:p>
   <text:p text:style-name="P13">No, when you add a String to a List in Java, it will add the whole String as a single element to the List. For example, if you have the following code:</text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.ArrayList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.List;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class Main {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List&lt;String&gt; myList = new ArrayList&lt;String&gt;();</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;Hello&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;World&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(myList);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="P13">The output will be:</text:p>
   <text:p text:style-name="P4">csharpCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">[Hello, World]</text:span></text:span></text:p>
   <text:p text:style-name="P13">As you can see, the entire String &quot;Hello&quot; and the entire String &quot;World&quot; were added as separate elements to the List, and they are displayed as separate elements when the List is printed. If you want to add individual characters of a String to a List, you can convert the String to a char array and then add each character to the List separately.</text:p>
   <text:p text:style-name="P13"><draw:frame draw:style-name="fr1" draw:name="Image5" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="4"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image6" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="5"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P13">but if we add String on only one add statement then no matter how long the word is does it take it to a single element ?</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">Yes, if you add a single String to a List using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">add()</text:span></text:span><text:span text:style-name="T3"> method, the entire String will be added as a single element to the List, no matter how long the String is. For example, consider the following code:</text:span></text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.ArrayList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.List;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class Main {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List&lt;String&gt; myList = new ArrayList&lt;String&gt;();</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;Hello World&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(myList);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="P13">The output will be:</text:p>
   <text:p text:style-name="P4"><text:soft-page-break/>csharpCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">[Hello World]</text:span></text:span></text:p>
   <text:p text:style-name="P13">As you can see, the entire String &quot;Hello World&quot; was added as a single element to the List, and it is displayed as a single element when the List is printed.</text:p>
   <text:p text:style-name="P13"><draw:frame draw:style-name="fr1" draw:name="Image7" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="6"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image8" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="7"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P13">then does it mean , to add element on different index of list , we should add it using seperate add method for each element to be added on the list ?</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">Yes, that&apos;s correct. To add elements to different positions in a List, you can use the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">add()</text:span></text:span><text:span text:style-name="T3"> method with the index parameter. For example, consider the following code:</text:span></text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.ArrayList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.List;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class Main {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List&lt;String&gt; myList = new ArrayList&lt;String&gt;();</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;Hello&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;World&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(1, &quot;Java&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(myList);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="P13">The output will be:</text:p>
   <text:p text:style-name="P4">csharpCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">[Hello, Java, World]</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">As you can see, the String &quot;Java&quot; was added at index 1 using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">add()</text:span></text:span><text:span text:style-name="T3"> method with the index parameter, and the existing </text:span><text:soft-page-break/><text:span text:style-name="T3">elements were shifted to the right to make space for the new element. If you want to add multiple elements to different positions in the List, you would need to call the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">add()</text:span></text:span><text:span text:style-name="T3"> method multiple times, each time specifying the index and the element to be added.</text:span></text:p>
   <text:p text:style-name="P13"><draw:frame draw:style-name="fr1" draw:name="Image9" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="8"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image10" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="9"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P13">and while adding without specifying the index , does it add according to the statement which ever comes first ??</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">Yes, when you add elements to a List using the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">add()</text:span></text:span><text:span text:style-name="T3"> method without specifying the index, the elements will be added to the end of the List in the order that they appear in the code. For example, consider the following code:</text:span></text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.ArrayList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.List;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class Main {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List&lt;String&gt; myList = new ArrayList&lt;String&gt;();</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;Hello&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;Java&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;World&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(myList);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="P13">The output will be:</text:p>
   <text:p text:style-name="P4">csharpCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">[Hello, Java, World]</text:span></text:span></text:p>
   <text:p text:style-name="P13">As you can see, the elements &quot;Hello&quot;, &quot;Java&quot;, and &quot;World&quot; were added to the List in the order that they appear in the code, and they <text:soft-page-break/>are displayed in that same order when the List is printed.</text:p>
   <text:p text:style-name="P6">what happends if we don&apos;t cast get values to String in above code ?</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">If you don&apos;t cast the value returned by the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">get()</text:span></text:span><text:span text:style-name="T3"> method to a String in the above code, the compiler will produce a warning about an unchecked cast, because the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">get()</text:span></text:span><text:span text:style-name="T3"> method returns an </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Object</text:span></text:span><text:span text:style-name="T3">, not necessarily a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3">.</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In other words, the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">get()</text:span></text:span><text:span text:style-name="T3"> method returns a reference to an object, and it&apos;s possible for that object to be of any class, not just a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3">. If you attempt to assign the result of </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">get()</text:span></text:span><text:span text:style-name="T3"> to a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3"> variable without casting, the compiler can&apos;t verify that the object is actually a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3"> at compile time, and so it issues a warning.</text:span></text:p>
   <text:p text:style-name="P13">Here&apos;s an example of the code with the unchecked cast warning:</text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.ArrayList;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">import java.util.List;</text:span></text:span></text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">public class Main {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>public static void main(String[] args) {</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>List myList = new ArrayList();</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>myList.add(&quot;Hello World&quot;);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>Object obj = myList.get(0); <text:s/>// returns an Object</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>String name = obj; <text:s/>// unchecked cast warning</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>System.out.println(name);</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">}</text:span></text:span></text:p>
   <text:p text:style-name="P13">When you compile this code, the compiler will produce a warning like this:</text:p>
   <text:p text:style-name="P4">javascriptCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">Main.java:8: warning: [unchecked] unchecked cast</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="8"/>String name = obj;</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="22"/>^</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="2"/>required: String</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3"><text:s text:c="2"/>found: <text:s text:c="3"/>Object</text:span></text:span></text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">1 warning</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In this case, the code will still run correctly because we know that the first element in the List is actually a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3">, but in general, it&apos;s a good practice to always check the type of the object returned by </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">get()</text:span></text:span><text:span text:style-name="T3"> and cast it to the appropriate type.</text:span></text:p>
   <text:p text:style-name="P13"><draw:frame draw:style-name="fr1" draw:name="Image11" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="10"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image12" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="11"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P13">What is E here , List&lt;E&gt;</text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">In the declaration </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">List&lt;E&gt;</text:span></text:span><text:span text:style-name="T3">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">E</text:span></text:span><text:span text:style-name="T3"> is a type parameter that stands for the type of elements that the List can hold.</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">The </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">List</text:span></text:span><text:span text:style-name="T3"> interface is a generic interface, which means that it can be parameterized with a type. The type parameter </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">E</text:span></text:span><text:span text:style-name="T3"> is used to specify the type of objects that can be stored in the List. When you create an instance of a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">List</text:span></text:span><text:span text:style-name="T3"> implementation such as </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">ArrayList</text:span></text:span><text:span text:style-name="T3">, you need to specify the type of elements that the List will hold.</text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">For example, if you want to create an </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">ArrayList</text:span></text:span><text:span text:style-name="T3"> that can hold </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3"> objects, you can declare it like this:</text:span></text:p>
   <text:p text:style-name="P4">javaCopy code</text:p>
   <text:p text:style-name="Preformatted_20_Text"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">List&lt;String&gt; myList = new ArrayList&lt;String&gt;();</text:span></text:span></text:p>
   <text:p text:style-name="Text_20_body"><text:span text:style-name="T3">Here, the type parameter </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">E</text:span></text:span><text:span text:style-name="T3"> is replaced with the type </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3">, which means that the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">ArrayList</text:span></text:span><text:span text:style-name="T3"> can only hold </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T3">String</text:span></text:span><text:span text:style-name="T3"> objects.</text:span></text:p>
   <text:p text:style-name="P13"><text:soft-page-break/>By using generic types, Java allows you to write code that is more generic and reusable. You can write methods and classes that can work with any type of object, as long as that object type satisfies certain constraints, which are specified using type parameters.</text:p>
   <text:p text:style-name="P13"/>
   <text:p text:style-name="P7">with generics we consider specific class has only one type of data type, if a class have mutltiple data types on it , generics can be used right ??</text:p>
   <text:p text:style-name="P9">Yes, that&apos;s correct. With generics, you can define a class to work with multiple data types, including classes that have multiple type parameters.</text:p>
   <text:p text:style-name="P9">For example, consider the following class that has multiple type parameters:</text:p>
   <text:p text:style-name="P1">csharpCopy code</text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">public class Pair&lt;K, V&gt; {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>private K key;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>private V value;</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public Pair(K key, V value) {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.key = key;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.value = value;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public K getKey() {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>return key;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public V getValue() {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>return value;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public void setKey(K key) {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.key = key;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public void setValue(V value) {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.value = value;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">}</text:span></text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T1">Here, the class </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Pair</text:span></text:span><text:span text:style-name="T1"> has two type parameters </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">K</text:span></text:span><text:span text:style-name="T1"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">V</text:span></text:span><text:span text:style-name="T1">, which can be used to specify the types of the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">key</text:span></text:span><text:span text:style-name="T1"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">value</text:span></text:span><text:span text:style-name="T1"> fields respectively. So you can create a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Pair</text:span></text:span><text:span text:style-name="T1"> object with any combination of data types for </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">K</text:span></text:span><text:span text:style-name="T1"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">V</text:span></text:span><text:span text:style-name="T1">, such as </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Pair&lt;String, Integer&gt;</text:span></text:span><text:span text:style-name="T1">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Pair&lt;Integer, Double&gt;</text:span></text:span><text:span text:style-name="T1">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Pair&lt;String, String&gt;</text:span></text:span><text:span text:style-name="T1">, etc.</text:span></text:p>
   <text:p text:style-name="P12"><text:soft-page-break/><draw:frame draw:style-name="fr1" draw:name="Image13" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="12"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image14" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="13"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P8">can generics also be used if a class has integer , string , and float on it ?</text:p>
   <text:p text:style-name="P9">Yes, generics can also be used if a class has integer, string, and float data types on it.</text:p>
   <text:p text:style-name="P9">You can define a class with multiple type parameters, and then use those type parameters to specify the data types of the fields or methods of the class. Here&apos;s an example of a class that uses three type parameters:</text:p>
   <text:p text:style-name="P1">typescriptCopy code</text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">public class Triple&lt;T1, T2, T3&gt; {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>private T1 first;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>private T2 second;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>private T3 third;</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public Triple(T1 first, T2 second, T3 third) {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.first = first;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.second = second;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.third = third;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public T1 getFirst() {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>return first;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public T2 getSecond() {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>return second;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public T3 getThird() {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>return third;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public void setFirst(T1 first) {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.first = first;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public void setSecond(T2 second) {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.second = second;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>public void setThird(T3 third) {</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="8"/>this.third = third;</text:span></text:span></text:p>
   <text:p text:style-name="P3"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1"><text:s text:c="4"/>}</text:span></text:span></text:p>
   <text:p text:style-name="P2"><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">}</text:span></text:span></text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T1">Here, the class </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Triple</text:span></text:span><text:span text:style-name="T1"> has three type parameters </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">T1</text:span></text:span><text:span text:style-name="T1">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">T2</text:span></text:span><text:span text:style-name="T1">, and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">T3</text:span></text:span><text:span text:style-name="T1">, which can be used to specify the data types of the </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">first</text:span></text:span><text:span text:style-name="T1">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">second</text:span></text:span><text:span text:style-name="T1">, and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">third</text:span></text:span><text:span text:style-name="T1"> fields respectively. You can create a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Triple</text:span></text:span><text:span text:style-name="T1"> object with any combination of data types for </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">T1</text:span></text:span><text:span text:style-name="T1">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">T2</text:span></text:span><text:span text:style-name="T1">, and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">T3</text:span></text:span><text:span text:style-name="T1">, such as </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Triple&lt;String, </text:span></text:span><text:soft-page-break/><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Integer, Float&gt;</text:span></text:span><text:span text:style-name="T1">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Triple&lt;Integer, String, Double&gt;</text:span></text:span><text:span text:style-name="T1">, </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Triple&lt;Float, String, Integer&gt;</text:span></text:span><text:span text:style-name="T1">, etc.</text:span></text:p>
   <text:p text:style-name="P12"><draw:frame draw:style-name="fr1" draw:name="Image15" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="14"><draw:image draw:mime-type="image/svg+xml">
      <office:binary-data>PHN2ZyB4bWxucz0naHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnIHZlcnNpb249JzEuMScg
       d2lkdGg9JzMwJyBoZWlnaHQ9JzMwJy8+
      </office:binary-data>
     </draw:image>
    </draw:frame><draw:frame draw:style-name="fr1" draw:name="Image16" text:anchor-type="as-char" svg:width="0.7874in" svg:height="0.3937in" draw:z-index="15"><draw:image xlink:href="https://chat.openai.com/_next/image?url=https%3A%2F%2Flh3.googleusercontent.com%2Fa%2FAGNmyxbO7Kw9cJBGwrXbw7sBOKXGCU_U_3259twrDVfBrQ%3Ds96-c&amp;w=64&amp;q=75" xlink:type="simple" xlink:show="embed" xlink:actuate="onLoad"/>
     <svg:title>Rabindra Dahal</svg:title>
    </draw:frame></text:p>
   <text:p text:style-name="P8">Then generally why developers make class with explicit data type like string and integer on it since using generics we can leverage many advantages ??</text:p>
   <text:p text:style-name="P11"><text:span text:style-name="T1">Developers may choose to use explicit data types like </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">String</text:span></text:span><text:span text:style-name="T1"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Integer</text:span></text:span><text:span text:style-name="T1"> in their classes for a variety of reasons. Some possible reasons include:</text:span></text:p>
   <text:list xml:id="list3217474318" text:style-name="L1">
    <text:list-item>
     <text:p text:style-name="P14"><text:span text:style-name="T1">Simplicity: In some cases, it may be simpler and more straightforward to use specific data types instead of generics. For example, if you have a class that represents a person&apos;s name, you might use a </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">String</text:span></text:span><text:span text:style-name="T1"> data type instead of a generic type parameter, because most people&apos;s names are represented as strings.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P14"><text:span text:style-name="T1">Type safety: Generics can help ensure type safety by allowing you to specify the expected data type of a variable or method parameter. However, in some cases, using specific data types like </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">String</text:span></text:span><text:span text:style-name="T1"> and </text:span><text:span text:style-name="Source_20_Text"><text:span text:style-name="T1">Integer</text:span></text:span><text:span text:style-name="T1"> may provide more explicit type safety guarantees.</text:span></text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P10">Legacy code: Some older code or libraries may not support generics, so developers may need to use explicit data types to maintain compatibility with existing code.</text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P9">That being said, generics can provide many advantages, such as improved code reuse, greater flexibility, and better type safety. So developers should carefully consider the benefits and drawbacks of using generics versus specific data types when designing their classes.</text:p>
   <text:p text:style-name="P13"/>
   <text:p text:style-name="P6"/>
  </office:text>
 </office:body>
</office:document>